import { getRandomInteger, stringifyPretty } from '$lib/util.svelte';
import type { LLM, LLMRequest } from '$lib/ai/llm';
import type { CharacterDescription } from '$lib/ai/agents/characterAgent';
import isEqual from 'lodash.isequal';

export type Story = typeof storyStateForPrompt;

export const exampleGameSystems = [
	'Pathfinder',
	'Call of Cthulhu',
	'Star Wars',
	'Fate Core',
	'Harry Potter',
	'Discworld',
	'World of Darkness',
	'GURPS',
	'Mutants & Masterminds',
	'Dungeons & Dragons'
];

export const TROPES_CLICHE_PROMPT =
	'Create a unique world with fresh names, avoiding clich√©s, generic prefixes, and overused tropes;\n';

// stringifyPretty(storyStateForPrompt) works because no json included in the values
//TODO if we remove this as object new tale form placeholder wont work anymore...
export const storyStateForPrompt = {
	game: 'Any Pen & Paper System e.g. Pathfinder, Call of Cthulhu, Star Wars, Fate Core, World of Darkness, GURPS, Mutants & Masterminds, Dungeons & Dragons',
	world_details:
		"Provide a concise yet vivid description of the world's key characteristics, highlighting its most distinctive features such as geography, culture, history, or any unique elements that define its essence. Focus on creating a snapshot that inspires and supports storytelling.",
	adventure_and_main_event:
		'Generate a random adventure with a random main story line. It does not have to be a quest, it can also be an event. It should be extraordinary and not cliche.',
	character_simple_description:
		'Generate a random character fitting the GAME system in ADVENTURE_AND_MAIN_EVENT, only provide a simple description as string nd not every detail',
	general_image_prompt:
		'Create a general system prompt max 10 words for this adventure to add to every image that is generated by an ai. Format: {visualStyle} {genre} {artistReference}',
	theme: 'THEME of the story telling, e.g. world the story is located in',
	tonality: 'TONALITY of the story telling, writing style, must fit GAME system'
};

export const initialStoryState: Story = {
	game: '',
	world_details: '',
	adventure_and_main_event: '',
	character_simple_description: '',
	general_image_prompt: '',
	theme: '',
	tonality: ''
};

export class StoryAgent {
	llm: LLM;

	constructor(llm: LLM) {
		this.llm = llm;
	}

	async generateRandomStorySettings(
		overwrites = {},
		characterDescription: CharacterDescription | undefined = undefined,
		uploadedFile: File | null = null
	): Promise<Story> {
		const storyAgent =
			'You are RPG story agent, crafting captivating, limitless GAME experiences using BOOKS, THEME, TONALITY for CHARACTER.\n' +
			TROPES_CLICHE_PROMPT +
			'If a document is attached, its content should be prioritized for generating the story settings, especially for "game", "world_details", and "adventure_and_main_event".\n' +
			'Always respond with following JSON!\n' +
			stringifyPretty(storyStateForPrompt);

		const preset: Partial<Story> = { // Use Partial<Story> for preset
			...overwrites
		};

		// Only pick a random game if no overwrites, no character, AND no file is provided
		if (isEqual(overwrites, {}) && characterDescription === undefined && !uploadedFile) {
			preset.game = exampleGameSystems[getRandomInteger(0, exampleGameSystems.length - 1)];
		}

		let userMessage = 'Create a new randomized story';
		if (uploadedFile) {
			userMessage += ' based on the attached document';
		}
		// Add preset info if it's not empty
		if (Object.keys(preset).length > 0) {
			userMessage += ' and considering the following settings: ' + stringifyPretty(preset);
		} else if (!uploadedFile) {
			// If no preset and no file, ensure the message ends correctly.
			userMessage += '.';
		}

		const request: LLMRequest = {
			userMessage: userMessage,
			historyMessages: [],
			systemInstruction: storyAgent
		};

		if (uploadedFile) {
			request.fileToUpload = {
				// path: uploadedFile, // This was the old field name
				file: uploadedFile, // Correct field name
				mimeType: uploadedFile.type || 'application/pdf', // Use file's type or default
				displayName: uploadedFile.name
			};
		}

		if (characterDescription) {
			request.historyMessages?.push({
				role: 'user',
				content:
					'Set following to character_simple_description; The adventure_and_main_event must be based on this;\n' +
					stringifyPretty(characterDescription)
			});
		}
		return (await this.llm.generateContent(request))?.content as Story;
	}
}
